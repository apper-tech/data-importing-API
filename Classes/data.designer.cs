#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataImporting
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DataSource")]
	public partial class dataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertContract_Type(Contract_Type instance);
    partial void UpdateContract_Type(Contract_Type instance);
    partial void DeleteContract_Type(Contract_Type instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertProperty(Property instance);
    partial void UpdateProperty(Property instance);
    partial void DeleteProperty(Property instance);
    partial void InsertProperty_Category(Property_Category instance);
    partial void UpdateProperty_Category(Property_Category instance);
    partial void DeleteProperty_Category(Property_Category instance);
    partial void InsertProperty_Type(Property_Type instance);
    partial void UpdateProperty_Type(Property_Type instance);
    partial void DeleteProperty_Type(Property_Type instance);
    #endregion
		
		public dataDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DataSourceConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Contract_Type> Contract_Types
		{
			get
			{
				return this.GetTable<Contract_Type>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<Property> Properties
		{
			get
			{
				return this.GetTable<Property>();
			}
		}
		
		public System.Data.Linq.Table<Property_Category> Property_Categories
		{
			get
			{
				return this.GetTable<Property_Category>();
			}
		}
		
		public System.Data.Linq.Table<Property_Photo> Property_Photos
		{
			get
			{
				return this.GetTable<Property_Photo>();
			}
		}
		
		public System.Data.Linq.Table<Property_Type> Property_Types
		{
			get
			{
				return this.GetTable<Property_Type>();
			}
		}
		
		public System.Data.Linq.Table<test1> test1s
		{
			get
			{
				return this.GetTable<test1>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cities")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _City_ID;
		
		private string _City_Name;
		
		private int _Country_ID;
		
		private string _City_Native_Name;
		
		private string _Latitude;
		
		private string _Longitude;
		
		private string _City_Latin_Name;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCity_IDChanging(int value);
    partial void OnCity_IDChanged();
    partial void OnCity_NameChanging(string value);
    partial void OnCity_NameChanged();
    partial void OnCountry_IDChanging(int value);
    partial void OnCountry_IDChanged();
    partial void OnCity_Native_NameChanging(string value);
    partial void OnCity_Native_NameChanged();
    partial void OnLatitudeChanging(string value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(string value);
    partial void OnLongitudeChanged();
    partial void OnCity_Latin_NameChanging(string value);
    partial void OnCity_Latin_NameChanged();
    #endregion
		
		public City()
		{
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int City_ID
		{
			get
			{
				return this._City_ID;
			}
			set
			{
				if ((this._City_ID != value))
				{
					this.OnCity_IDChanging(value);
					this.SendPropertyChanging();
					this._City_ID = value;
					this.SendPropertyChanged("City_ID");
					this.OnCity_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string City_Name
		{
			get
			{
				return this._City_Name;
			}
			set
			{
				if ((this._City_Name != value))
				{
					this.OnCity_NameChanging(value);
					this.SendPropertyChanging();
					this._City_Name = value;
					this.SendPropertyChanged("City_Name");
					this.OnCity_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country_ID", DbType="Int NOT NULL")]
		public int Country_ID
		{
			get
			{
				return this._Country_ID;
			}
			set
			{
				if ((this._Country_ID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountry_IDChanging(value);
					this.SendPropertyChanging();
					this._Country_ID = value;
					this.SendPropertyChanged("Country_ID");
					this.OnCountry_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City_Native_Name", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string City_Native_Name
		{
			get
			{
				return this._City_Native_Name;
			}
			set
			{
				if ((this._City_Native_Name != value))
				{
					this.OnCity_Native_NameChanging(value);
					this.SendPropertyChanging();
					this._City_Native_Name = value;
					this.SendPropertyChanged("City_Native_Name");
					this.OnCity_Native_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City_Latin_Name", DbType="VarChar(50)")]
		public string City_Latin_Name
		{
			get
			{
				return this._City_Latin_Name;
			}
			set
			{
				if ((this._City_Latin_Name != value))
				{
					this.OnCity_Latin_NameChanging(value);
					this.SendPropertyChanging();
					this._City_Latin_Name = value;
					this.SendPropertyChanged("City_Latin_Name");
					this.OnCity_Latin_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_City", Storage="_Country", ThisKey="Country_ID", OtherKey="Country_ID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Cities.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Cities.Add(this);
						this._Country_ID = value.Country_ID;
					}
					else
					{
						this._Country_ID = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _User_ID;
		
		private string _First_Name;
		
		private string _Last_Name;
		
		private string _Address;
		
		private bool _Has_Office;
		
		private bool _Allow_Prom;
		
		private bool _Sub_NewsLetter;
		
		private string _Email;
		
		private System.Nullable<int> _Phone_Num;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_IDChanging(string value);
    partial void OnUser_IDChanged();
    partial void OnFirst_NameChanging(string value);
    partial void OnFirst_NameChanged();
    partial void OnLast_NameChanging(string value);
    partial void OnLast_NameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnHas_OfficeChanging(bool value);
    partial void OnHas_OfficeChanged();
    partial void OnAllow_PromChanging(bool value);
    partial void OnAllow_PromChanged();
    partial void OnSub_NewsLetterChanging(bool value);
    partial void OnSub_NewsLetterChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhone_NumChanging(System.Nullable<int> value);
    partial void OnPhone_NumChanged();
    #endregion
		
		public User()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_First_Name", DbType="NVarChar(100)")]
		public string First_Name
		{
			get
			{
				return this._First_Name;
			}
			set
			{
				if ((this._First_Name != value))
				{
					this.OnFirst_NameChanging(value);
					this.SendPropertyChanging();
					this._First_Name = value;
					this.SendPropertyChanged("First_Name");
					this.OnFirst_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Name", DbType="NVarChar(100)")]
		public string Last_Name
		{
			get
			{
				return this._Last_Name;
			}
			set
			{
				if ((this._Last_Name != value))
				{
					this.OnLast_NameChanging(value);
					this.SendPropertyChanging();
					this._Last_Name = value;
					this.SendPropertyChanged("Last_Name");
					this.OnLast_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(100)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Has_Office", DbType="Bit NOT NULL")]
		public bool Has_Office
		{
			get
			{
				return this._Has_Office;
			}
			set
			{
				if ((this._Has_Office != value))
				{
					this.OnHas_OfficeChanging(value);
					this.SendPropertyChanging();
					this._Has_Office = value;
					this.SendPropertyChanged("Has_Office");
					this.OnHas_OfficeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Allow_Prom", DbType="Bit NOT NULL")]
		public bool Allow_Prom
		{
			get
			{
				return this._Allow_Prom;
			}
			set
			{
				if ((this._Allow_Prom != value))
				{
					this.OnAllow_PromChanging(value);
					this.SendPropertyChanging();
					this._Allow_Prom = value;
					this.SendPropertyChanged("Allow_Prom");
					this.OnAllow_PromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sub_NewsLetter", DbType="Bit NOT NULL")]
		public bool Sub_NewsLetter
		{
			get
			{
				return this._Sub_NewsLetter;
			}
			set
			{
				if ((this._Sub_NewsLetter != value))
				{
					this.OnSub_NewsLetterChanging(value);
					this.SendPropertyChanging();
					this._Sub_NewsLetter = value;
					this.SendPropertyChanged("Sub_NewsLetter");
					this.OnSub_NewsLetterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone_Num", DbType="Int")]
		public System.Nullable<int> Phone_Num
		{
			get
			{
				return this._Phone_Num;
			}
			set
			{
				if ((this._Phone_Num != value))
				{
					this.OnPhone_NumChanging(value);
					this.SendPropertyChanging();
					this._Phone_Num = value;
					this.SendPropertyChanged("Phone_Num");
					this.OnPhone_NumChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contract_Type")]
	public partial class Contract_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Contract_Type_ID;
		
		private string _Contract_Type_Desc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContract_Type_IDChanging(int value);
    partial void OnContract_Type_IDChanged();
    partial void OnContract_Type_DescChanging(string value);
    partial void OnContract_Type_DescChanged();
    #endregion
		
		public Contract_Type()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contract_Type_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Contract_Type_ID
		{
			get
			{
				return this._Contract_Type_ID;
			}
			set
			{
				if ((this._Contract_Type_ID != value))
				{
					this.OnContract_Type_IDChanging(value);
					this.SendPropertyChanging();
					this._Contract_Type_ID = value;
					this.SendPropertyChanged("Contract_Type_ID");
					this.OnContract_Type_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contract_Type_Desc", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Contract_Type_Desc
		{
			get
			{
				return this._Contract_Type_Desc;
			}
			set
			{
				if ((this._Contract_Type_Desc != value))
				{
					this.OnContract_Type_DescChanging(value);
					this.SendPropertyChanging();
					this._Contract_Type_Desc = value;
					this.SendPropertyChanged("Contract_Type_Desc");
					this.OnContract_Type_DescChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Countries")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Country_ID;
		
		private string _Country_Code;
		
		private string _Country_Name;
		
		private string _Country_Native_Name;
		
		private EntitySet<City> _Cities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountry_IDChanging(int value);
    partial void OnCountry_IDChanged();
    partial void OnCountry_CodeChanging(string value);
    partial void OnCountry_CodeChanged();
    partial void OnCountry_NameChanging(string value);
    partial void OnCountry_NameChanged();
    partial void OnCountry_Native_NameChanging(string value);
    partial void OnCountry_Native_NameChanged();
    #endregion
		
		public Country()
		{
			this._Cities = new EntitySet<City>(new Action<City>(this.attach_Cities), new Action<City>(this.detach_Cities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Country_ID
		{
			get
			{
				return this._Country_ID;
			}
			set
			{
				if ((this._Country_ID != value))
				{
					this.OnCountry_IDChanging(value);
					this.SendPropertyChanging();
					this._Country_ID = value;
					this.SendPropertyChanged("Country_ID");
					this.OnCountry_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country_Code", DbType="VarChar(3) NOT NULL", CanBeNull=false)]
		public string Country_Code
		{
			get
			{
				return this._Country_Code;
			}
			set
			{
				if ((this._Country_Code != value))
				{
					this.OnCountry_CodeChanging(value);
					this.SendPropertyChanging();
					this._Country_Code = value;
					this.SendPropertyChanged("Country_Code");
					this.OnCountry_CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Country_Name
		{
			get
			{
				return this._Country_Name;
			}
			set
			{
				if ((this._Country_Name != value))
				{
					this.OnCountry_NameChanging(value);
					this.SendPropertyChanging();
					this._Country_Name = value;
					this.SendPropertyChanged("Country_Name");
					this.OnCountry_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country_Native_Name", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Country_Native_Name
		{
			get
			{
				return this._Country_Native_Name;
			}
			set
			{
				if ((this._Country_Native_Name != value))
				{
					this.OnCountry_Native_NameChanging(value);
					this.SendPropertyChanging();
					this._Country_Native_Name = value;
					this.SendPropertyChanged("Country_Native_Name");
					this.OnCountry_Native_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_City", Storage="_Cities", ThisKey="Country_ID", OtherKey="Country_ID")]
		public EntitySet<City> Cities
		{
			get
			{
				return this._Cities;
			}
			set
			{
				this._Cities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Properties")]
	public partial class Property : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PropertyID;
		
		private int _Property_Category_ID;
		
		private int _Property_Type_ID;
		
		private int _Property_Size;
		
		private System.DateTime _Date_Added;
		
		private int _Floor;
		
		private System.Nullable<bool> _Has_Garage;
		
		private System.Nullable<bool> _Has_Garden;
		
		private int _Num_Bedrooms;
		
		private int _Num_Bathrooms;
		
		private System.DateTime _Expire_Date;
		
		private System.Nullable<int> _Contract_Type;
		
		private System.Nullable<int> _City_ID;
		
		private System.Nullable<int> _Country_ID;
		
		private string _Address;
		
		private string _Location;
		
		private string _Zip_Code;
		
		private string _Other_Details;
		
		private System.Nullable<int> _Sale_Price;
		
		private System.Nullable<int> _Rent_Price;
		
		private System.Nullable<int> _Num_Floors;
		
		private string _User_ID;
		
		private string _Property_Photo;
		
		private string _Url_ext;
		
		private string _Property_Id_ext;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPropertyIDChanging(int value);
    partial void OnPropertyIDChanged();
    partial void OnProperty_Category_IDChanging(int value);
    partial void OnProperty_Category_IDChanged();
    partial void OnProperty_Type_IDChanging(int value);
    partial void OnProperty_Type_IDChanged();
    partial void OnProperty_SizeChanging(int value);
    partial void OnProperty_SizeChanged();
    partial void OnDate_AddedChanging(System.DateTime value);
    partial void OnDate_AddedChanged();
    partial void OnFloorChanging(int value);
    partial void OnFloorChanged();
    partial void OnHas_GarageChanging(System.Nullable<bool> value);
    partial void OnHas_GarageChanged();
    partial void OnHas_GardenChanging(System.Nullable<bool> value);
    partial void OnHas_GardenChanged();
    partial void OnNum_BedroomsChanging(int value);
    partial void OnNum_BedroomsChanged();
    partial void OnNum_BathroomsChanging(int value);
    partial void OnNum_BathroomsChanged();
    partial void OnExpire_DateChanging(System.DateTime value);
    partial void OnExpire_DateChanged();
    partial void OnContract_TypeChanging(System.Nullable<int> value);
    partial void OnContract_TypeChanged();
    partial void OnCity_IDChanging(System.Nullable<int> value);
    partial void OnCity_IDChanged();
    partial void OnCountry_IDChanging(System.Nullable<int> value);
    partial void OnCountry_IDChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnZip_CodeChanging(string value);
    partial void OnZip_CodeChanged();
    partial void OnOther_DetailsChanging(string value);
    partial void OnOther_DetailsChanged();
    partial void OnSale_PriceChanging(System.Nullable<int> value);
    partial void OnSale_PriceChanged();
    partial void OnRent_PriceChanging(System.Nullable<int> value);
    partial void OnRent_PriceChanged();
    partial void OnNum_FloorsChanging(System.Nullable<int> value);
    partial void OnNum_FloorsChanged();
    partial void OnUser_IDChanging(string value);
    partial void OnUser_IDChanged();
    partial void OnProperty_PhotoChanging(string value);
    partial void OnProperty_PhotoChanged();
    partial void OnUrl_extChanging(string value);
    partial void OnUrl_extChanged();
    partial void OnProperty_Id_extChanging(string value);
    partial void OnProperty_Id_extChanged();
    #endregion
		
		public Property()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PropertyID
		{
			get
			{
				return this._PropertyID;
			}
			set
			{
				if ((this._PropertyID != value))
				{
					this.OnPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._PropertyID = value;
					this.SendPropertyChanged("PropertyID");
					this.OnPropertyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Property_Category_ID", DbType="Int NOT NULL")]
		public int Property_Category_ID
		{
			get
			{
				return this._Property_Category_ID;
			}
			set
			{
				if ((this._Property_Category_ID != value))
				{
					this.OnProperty_Category_IDChanging(value);
					this.SendPropertyChanging();
					this._Property_Category_ID = value;
					this.SendPropertyChanged("Property_Category_ID");
					this.OnProperty_Category_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Property_Type_ID", DbType="Int NOT NULL")]
		public int Property_Type_ID
		{
			get
			{
				return this._Property_Type_ID;
			}
			set
			{
				if ((this._Property_Type_ID != value))
				{
					this.OnProperty_Type_IDChanging(value);
					this.SendPropertyChanging();
					this._Property_Type_ID = value;
					this.SendPropertyChanged("Property_Type_ID");
					this.OnProperty_Type_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Property_Size", DbType="Int NOT NULL")]
		public int Property_Size
		{
			get
			{
				return this._Property_Size;
			}
			set
			{
				if ((this._Property_Size != value))
				{
					this.OnProperty_SizeChanging(value);
					this.SendPropertyChanging();
					this._Property_Size = value;
					this.SendPropertyChanged("Property_Size");
					this.OnProperty_SizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_Added", DbType="DateTime NOT NULL")]
		public System.DateTime Date_Added
		{
			get
			{
				return this._Date_Added;
			}
			set
			{
				if ((this._Date_Added != value))
				{
					this.OnDate_AddedChanging(value);
					this.SendPropertyChanging();
					this._Date_Added = value;
					this.SendPropertyChanged("Date_Added");
					this.OnDate_AddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Floor", DbType="Int NOT NULL")]
		public int Floor
		{
			get
			{
				return this._Floor;
			}
			set
			{
				if ((this._Floor != value))
				{
					this.OnFloorChanging(value);
					this.SendPropertyChanging();
					this._Floor = value;
					this.SendPropertyChanged("Floor");
					this.OnFloorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Has_Garage", DbType="Bit")]
		public System.Nullable<bool> Has_Garage
		{
			get
			{
				return this._Has_Garage;
			}
			set
			{
				if ((this._Has_Garage != value))
				{
					this.OnHas_GarageChanging(value);
					this.SendPropertyChanging();
					this._Has_Garage = value;
					this.SendPropertyChanged("Has_Garage");
					this.OnHas_GarageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Has_Garden", DbType="Bit")]
		public System.Nullable<bool> Has_Garden
		{
			get
			{
				return this._Has_Garden;
			}
			set
			{
				if ((this._Has_Garden != value))
				{
					this.OnHas_GardenChanging(value);
					this.SendPropertyChanging();
					this._Has_Garden = value;
					this.SendPropertyChanged("Has_Garden");
					this.OnHas_GardenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Num_Bedrooms", DbType="Int NOT NULL")]
		public int Num_Bedrooms
		{
			get
			{
				return this._Num_Bedrooms;
			}
			set
			{
				if ((this._Num_Bedrooms != value))
				{
					this.OnNum_BedroomsChanging(value);
					this.SendPropertyChanging();
					this._Num_Bedrooms = value;
					this.SendPropertyChanged("Num_Bedrooms");
					this.OnNum_BedroomsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Num_Bathrooms", DbType="Int NOT NULL")]
		public int Num_Bathrooms
		{
			get
			{
				return this._Num_Bathrooms;
			}
			set
			{
				if ((this._Num_Bathrooms != value))
				{
					this.OnNum_BathroomsChanging(value);
					this.SendPropertyChanging();
					this._Num_Bathrooms = value;
					this.SendPropertyChanged("Num_Bathrooms");
					this.OnNum_BathroomsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expire_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Expire_Date
		{
			get
			{
				return this._Expire_Date;
			}
			set
			{
				if ((this._Expire_Date != value))
				{
					this.OnExpire_DateChanging(value);
					this.SendPropertyChanging();
					this._Expire_Date = value;
					this.SendPropertyChanged("Expire_Date");
					this.OnExpire_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contract_Type", DbType="Int")]
		public System.Nullable<int> Contract_Type
		{
			get
			{
				return this._Contract_Type;
			}
			set
			{
				if ((this._Contract_Type != value))
				{
					this.OnContract_TypeChanging(value);
					this.SendPropertyChanging();
					this._Contract_Type = value;
					this.SendPropertyChanged("Contract_Type");
					this.OnContract_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City_ID", DbType="Int")]
		public System.Nullable<int> City_ID
		{
			get
			{
				return this._City_ID;
			}
			set
			{
				if ((this._City_ID != value))
				{
					this.OnCity_IDChanging(value);
					this.SendPropertyChanging();
					this._City_ID = value;
					this.SendPropertyChanged("City_ID");
					this.OnCity_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country_ID", DbType="Int")]
		public System.Nullable<int> Country_ID
		{
			get
			{
				return this._Country_ID;
			}
			set
			{
				if ((this._Country_ID != value))
				{
					this.OnCountry_IDChanging(value);
					this.SendPropertyChanging();
					this._Country_ID = value;
					this.SendPropertyChanged("Country_ID");
					this.OnCountry_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(100)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="VarChar(50)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zip_Code", DbType="VarChar(50)")]
		public string Zip_Code
		{
			get
			{
				return this._Zip_Code;
			}
			set
			{
				if ((this._Zip_Code != value))
				{
					this.OnZip_CodeChanging(value);
					this.SendPropertyChanging();
					this._Zip_Code = value;
					this.SendPropertyChanged("Zip_Code");
					this.OnZip_CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Other_Details", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Other_Details
		{
			get
			{
				return this._Other_Details;
			}
			set
			{
				if ((this._Other_Details != value))
				{
					this.OnOther_DetailsChanging(value);
					this.SendPropertyChanging();
					this._Other_Details = value;
					this.SendPropertyChanged("Other_Details");
					this.OnOther_DetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sale_Price", DbType="Int")]
		public System.Nullable<int> Sale_Price
		{
			get
			{
				return this._Sale_Price;
			}
			set
			{
				if ((this._Sale_Price != value))
				{
					this.OnSale_PriceChanging(value);
					this.SendPropertyChanging();
					this._Sale_Price = value;
					this.SendPropertyChanged("Sale_Price");
					this.OnSale_PriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rent_Price", DbType="Int")]
		public System.Nullable<int> Rent_Price
		{
			get
			{
				return this._Rent_Price;
			}
			set
			{
				if ((this._Rent_Price != value))
				{
					this.OnRent_PriceChanging(value);
					this.SendPropertyChanging();
					this._Rent_Price = value;
					this.SendPropertyChanged("Rent_Price");
					this.OnRent_PriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Num_Floors", DbType="Int")]
		public System.Nullable<int> Num_Floors
		{
			get
			{
				return this._Num_Floors;
			}
			set
			{
				if ((this._Num_Floors != value))
				{
					this.OnNum_FloorsChanging(value);
					this.SendPropertyChanging();
					this._Num_Floors = value;
					this.SendPropertyChanged("Num_Floors");
					this.OnNum_FloorsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Property_Photo", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Property_Photo
		{
			get
			{
				return this._Property_Photo;
			}
			set
			{
				if ((this._Property_Photo != value))
				{
					this.OnProperty_PhotoChanging(value);
					this.SendPropertyChanging();
					this._Property_Photo = value;
					this.SendPropertyChanged("Property_Photo");
					this.OnProperty_PhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url_ext", DbType="VarChar(MAX)")]
		public string Url_ext
		{
			get
			{
				return this._Url_ext;
			}
			set
			{
				if ((this._Url_ext != value))
				{
					this.OnUrl_extChanging(value);
					this.SendPropertyChanging();
					this._Url_ext = value;
					this.SendPropertyChanged("Url_ext");
					this.OnUrl_extChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Property_Id_ext", DbType="VarChar(MAX)")]
		public string Property_Id_ext
		{
			get
			{
				return this._Property_Id_ext;
			}
			set
			{
				if ((this._Property_Id_ext != value))
				{
					this.OnProperty_Id_extChanging(value);
					this.SendPropertyChanging();
					this._Property_Id_ext = value;
					this.SendPropertyChanged("Property_Id_ext");
					this.OnProperty_Id_extChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Property_Category")]
	public partial class Property_Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Cat_ID;
		
		private string _Cat_Name;
		
		private string _Cat_Description;
		
		private EntitySet<Property_Type> _Property_Types;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCat_IDChanging(int value);
    partial void OnCat_IDChanged();
    partial void OnCat_NameChanging(string value);
    partial void OnCat_NameChanged();
    partial void OnCat_DescriptionChanging(string value);
    partial void OnCat_DescriptionChanged();
    #endregion
		
		public Property_Category()
		{
			this._Property_Types = new EntitySet<Property_Type>(new Action<Property_Type>(this.attach_Property_Types), new Action<Property_Type>(this.detach_Property_Types));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cat_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Cat_ID
		{
			get
			{
				return this._Cat_ID;
			}
			set
			{
				if ((this._Cat_ID != value))
				{
					this.OnCat_IDChanging(value);
					this.SendPropertyChanging();
					this._Cat_ID = value;
					this.SendPropertyChanged("Cat_ID");
					this.OnCat_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cat_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Cat_Name
		{
			get
			{
				return this._Cat_Name;
			}
			set
			{
				if ((this._Cat_Name != value))
				{
					this.OnCat_NameChanging(value);
					this.SendPropertyChanging();
					this._Cat_Name = value;
					this.SendPropertyChanged("Cat_Name");
					this.OnCat_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cat_Description", DbType="NVarChar(50)")]
		public string Cat_Description
		{
			get
			{
				return this._Cat_Description;
			}
			set
			{
				if ((this._Cat_Description != value))
				{
					this.OnCat_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._Cat_Description = value;
					this.SendPropertyChanged("Cat_Description");
					this.OnCat_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_Category_Property_Type", Storage="_Property_Types", ThisKey="Cat_ID", OtherKey="Cat_ID")]
		public EntitySet<Property_Type> Property_Types
		{
			get
			{
				return this._Property_Types;
			}
			set
			{
				this._Property_Types.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Property_Types(Property_Type entity)
		{
			this.SendPropertyChanging();
			entity.Property_Category = this;
		}
		
		private void detach_Property_Types(Property_Type entity)
		{
			this.SendPropertyChanging();
			entity.Property_Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Property_Photos")]
	public partial class Property_Photo
	{
		
		private int _Property_Photo_ID;
		
		private int _Photo_Num;
		
		private string _Photo_Description;
		
		private string _Photo_Path;
		
		public Property_Photo()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Property_Photo_ID", DbType="Int NOT NULL")]
		public int Property_Photo_ID
		{
			get
			{
				return this._Property_Photo_ID;
			}
			set
			{
				if ((this._Property_Photo_ID != value))
				{
					this._Property_Photo_ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo_Num", DbType="Int NOT NULL")]
		public int Photo_Num
		{
			get
			{
				return this._Photo_Num;
			}
			set
			{
				if ((this._Photo_Num != value))
				{
					this._Photo_Num = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo_Description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Photo_Description
		{
			get
			{
				return this._Photo_Description;
			}
			set
			{
				if ((this._Photo_Description != value))
				{
					this._Photo_Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo_Path", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Photo_Path
		{
			get
			{
				return this._Photo_Path;
			}
			set
			{
				if ((this._Photo_Path != value))
				{
					this._Photo_Path = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Property_Type")]
	public partial class Property_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Property_Type_ID;
		
		private string _Property_Type_Description;
		
		private string _Property_Type_Name;
		
		private int _Cat_ID;
		
		private EntityRef<Property_Category> _Property_Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProperty_Type_IDChanging(int value);
    partial void OnProperty_Type_IDChanged();
    partial void OnProperty_Type_DescriptionChanging(string value);
    partial void OnProperty_Type_DescriptionChanged();
    partial void OnProperty_Type_NameChanging(string value);
    partial void OnProperty_Type_NameChanged();
    partial void OnCat_IDChanging(int value);
    partial void OnCat_IDChanged();
    #endregion
		
		public Property_Type()
		{
			this._Property_Category = default(EntityRef<Property_Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Property_Type_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Property_Type_ID
		{
			get
			{
				return this._Property_Type_ID;
			}
			set
			{
				if ((this._Property_Type_ID != value))
				{
					this.OnProperty_Type_IDChanging(value);
					this.SendPropertyChanging();
					this._Property_Type_ID = value;
					this.SendPropertyChanged("Property_Type_ID");
					this.OnProperty_Type_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Property_Type_Description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Property_Type_Description
		{
			get
			{
				return this._Property_Type_Description;
			}
			set
			{
				if ((this._Property_Type_Description != value))
				{
					this.OnProperty_Type_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._Property_Type_Description = value;
					this.SendPropertyChanged("Property_Type_Description");
					this.OnProperty_Type_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Property_Type_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Property_Type_Name
		{
			get
			{
				return this._Property_Type_Name;
			}
			set
			{
				if ((this._Property_Type_Name != value))
				{
					this.OnProperty_Type_NameChanging(value);
					this.SendPropertyChanging();
					this._Property_Type_Name = value;
					this.SendPropertyChanged("Property_Type_Name");
					this.OnProperty_Type_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cat_ID", DbType="Int NOT NULL")]
		public int Cat_ID
		{
			get
			{
				return this._Cat_ID;
			}
			set
			{
				if ((this._Cat_ID != value))
				{
					if (this._Property_Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCat_IDChanging(value);
					this.SendPropertyChanging();
					this._Cat_ID = value;
					this.SendPropertyChanged("Cat_ID");
					this.OnCat_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_Category_Property_Type", Storage="_Property_Category", ThisKey="Cat_ID", OtherKey="Cat_ID", IsForeignKey=true)]
		public Property_Category Property_Category
		{
			get
			{
				return this._Property_Category.Entity;
			}
			set
			{
				Property_Category previousValue = this._Property_Category.Entity;
				if (((previousValue != value) 
							|| (this._Property_Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Property_Category.Entity = null;
						previousValue.Property_Types.Remove(this);
					}
					this._Property_Category.Entity = value;
					if ((value != null))
					{
						value.Property_Types.Add(this);
						this._Cat_ID = value.Cat_ID;
					}
					else
					{
						this._Cat_ID = default(int);
					}
					this.SendPropertyChanged("Property_Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.test1")]
	public partial class test1
	{
		
		private string _col1;
		
		private string _col2;
		
		private string _col3;
		
		public test1()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_col1", DbType="NVarChar(100)")]
		public string col1
		{
			get
			{
				return this._col1;
			}
			set
			{
				if ((this._col1 != value))
				{
					this._col1 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_col2", DbType="NVarChar(100)")]
		public string col2
		{
			get
			{
				return this._col2;
			}
			set
			{
				if ((this._col2 != value))
				{
					this._col2 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_col3", DbType="NVarChar(100)")]
		public string col3
		{
			get
			{
				return this._col3;
			}
			set
			{
				if ((this._col3 != value))
				{
					this._col3 = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
